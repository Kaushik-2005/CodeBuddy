"""
Code Templates and Refactoring Tools for CodeBuddy
"""
import os
import ast
import re
from typing import Dict, List, Optional, Any
from datetime import datetime


class CodeTemplateTool:
    """Generate code from predefined templates"""
    
    def execute(self, template_name: str, **kwargs) -> str:
        """Generate code from template"""
        try:
            templates = {
                'python_script': self._python_script_template,
                'python_module': self._python_module_template,
                'test_file': self._test_file_template,
                'config_file': self._config_file_template,
                'dockerfile': self._dockerfile_template,
                'requirements': self._requirements_template,
                'gitignore': self._gitignore_template,
                'readme': self._readme_template,
                'setup_py': self._setup_py_template,
                'makefile': self._makefile_template,
            }
            
            if template_name not in templates:
                available = ', '.join(templates.keys())
                return f"❌ Template '{template_name}' not found. Available: {available}"
            
            template_func = templates[template_name]
            code = template_func(**kwargs)
            
            return f"✅ Generated {template_name} template:\n\n```\n{code}\n```"
            
        except Exception as e:
            return f"❌ Template generation failed: {e}"
    
    def _python_script_template(self, name: str = "my_script", **kwargs) -> str:
        """Python script template"""
        return f'''#!/usr/bin/env python3
"""
{name.replace('_', ' ').title()} - Generated by CodeBuddy
{kwargs.get('description', 'A Python script')}
"""

import sys
import os
from typing import List, Dict, Optional, Any


def main():
    """Main function"""
    print("🚀 Starting {name.replace('_', ' ').title()}...")
    
    # TODO: Implement main logic here
    
    print("✅ {name.replace('_', ' ').title()} completed successfully!")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\\n⚠️ Operation cancelled by user")
        sys.exit(130)
    except Exception as e:
        print(f"❌ Error: {{e}}")
        sys.exit(1)
'''
    
    def _python_module_template(self, name: str = "my_module", **kwargs) -> str:
        """Python module template"""
        return f'''"""
{name.replace('_', ' ').title()} Module - Generated by CodeBuddy
{kwargs.get('description', 'A Python module')}
"""

__version__ = "1.0.0"
__author__ = "{kwargs.get('author', 'CodeBuddy')}"

from typing import List, Dict, Optional, Any


class {name.replace('_', '').title()}:
    """Main class for {name.replace('_', ' ').title()}"""
    
    def __init__(self):
        """Initialize the {name.replace('_', ' ').lower()}"""
        self._initialized = True
    
    def process(self, data: Any) -> Any:
        """Process data"""
        # TODO: Implement processing logic
        return data
    
    def __str__(self) -> str:
        """String representation"""
        return f"{name.replace('_', '').title()}(initialized={{self._initialized}})"


def helper_function(param: str) -> str:
    """A helper function"""
    # TODO: Implement helper logic
    return param


# Module-level constants
DEFAULT_CONFIG = {{
    'debug': False,
    'timeout': 30,
    'retries': 3
}}


# Export public API
__all__ = [
    '{name.replace('_', '').title()}',
    'helper_function',
    'DEFAULT_CONFIG'
]
'''
    
    def _test_file_template(self, module_name: str = "my_module", **kwargs) -> str:
        """Test file template"""
        return f'''#!/usr/bin/env python3
"""
Test {module_name.replace('_', ' ').title()} - Generated by CodeBuddy
Unit tests for {module_name} module
"""

import unittest
import sys
import os

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from {module_name} import {module_name.replace('_', '').title()}


class Test{module_name.replace('_', '').title()}(unittest.TestCase):
    """Test cases for {module_name.replace('_', '').title()} class"""
    
    def setUp(self):
        """Set up test fixtures before each test method"""
        self.instance = {module_name.replace('_', '').title()}()
    
    def tearDown(self):
        """Clean up after each test method"""
        pass
    
    def test_initialization(self):
        """Test object initialization"""
        self.assertIsNotNone(self.instance)
        self.assertTrue(hasattr(self.instance, '_initialized'))
    
    def test_process_method(self):
        """Test process method"""
        test_data = "test_input"
        result = self.instance.process(test_data)
        self.assertEqual(result, test_data)  # Modify based on expected behavior
    
    def test_string_representation(self):
        """Test string representation"""
        str_repr = str(self.instance)
        self.assertIn('{module_name.replace('_', '').title()}', str_repr)
    
    def test_edge_cases(self):
        """Test edge cases"""
        # Test with None
        result = self.instance.process(None)
        self.assertIsNone(result)
        
        # Test with empty string
        result = self.instance.process("")
        self.assertEqual(result, "")


class TestHelperFunctions(unittest.TestCase):
    """Test cases for helper functions"""
    
    def test_helper_function(self):
        """Test helper function"""
        from {module_name} import helper_function
        
        test_input = "test"
        result = helper_function(test_input)
        self.assertEqual(result, test_input)


def run_tests():
    """Run all tests"""
    # Create test suite
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # Add test cases
    suite.addTests(loader.loadTestsFromTestCase(Test{module_name.replace('_', '').title()}))
    suite.addTests(loader.loadTestsFromTestCase(TestHelperFunctions))
    
    # Run tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    return result.wasSuccessful()


if __name__ == "__main__":
    print("🧪 Running tests for {module_name}...")
    success = run_tests()
    
    if success:
        print("✅ All tests passed!")
        sys.exit(0)
    else:
        print("❌ Some tests failed!")
        sys.exit(1)
'''
    
    def _config_file_template(self, format_type: str = "json", **kwargs) -> str:
        """Configuration file template"""
        if format_type.lower() == "json":
            return '''{
  "app": {
    "name": "CodeBuddy App",
    "version": "1.0.0",
    "debug": false,
    "environment": "development"
  },
  "database": {
    "host": "localhost",
    "port": 5432,
    "name": "myapp_db",
    "user": "myapp_user",
    "password": "change_me_in_production"
  },
  "api": {
    "host": "0.0.0.0",
    "port": 8000,
    "timeout": 30,
    "rate_limit": 100
  },
  "logging": {
    "level": "INFO",
    "file": "app.log",
    "max_size": "10MB",
    "backup_count": 5
  },
  "features": {
    "authentication": true,
    "caching": true,
    "monitoring": false
  }
}'''
        elif format_type.lower() == "yaml":
            return '''# CodeBuddy App Configuration
app:
  name: "CodeBuddy App"
  version: "1.0.0"
  debug: false
  environment: "development"

database:
  host: "localhost"
  port: 5432
  name: "myapp_db"
  user: "myapp_user"
  password: "change_me_in_production"

api:
  host: "0.0.0.0"
  port: 8000
  timeout: 30
  rate_limit: 100

logging:
  level: "INFO"
  file: "app.log"
  max_size: "10MB"
  backup_count: 5

features:
  authentication: true
  caching: true
  monitoring: false
'''
        else:
            return '''# CodeBuddy App Configuration
# Generated by CodeBuddy

[app]
name = CodeBuddy App
version = 1.0.0
debug = false
environment = development

[database]
host = localhost
port = 5432
name = myapp_db
user = myapp_user
password = change_me_in_production

[api]
host = 0.0.0.0
port = 8000
timeout = 30
rate_limit = 100

[logging]
level = INFO
file = app.log
max_size = 10MB
backup_count = 5

[features]
authentication = true
caching = true
monitoring = false
'''
    
    def _dockerfile_template(self, base_image: str = "python:3.9-slim", **kwargs) -> str:
        """Dockerfile template"""
        return f'''# Dockerfile - Generated by CodeBuddy
FROM {base_image}

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update \\
    && apt-get install -y --no-install-recommends \\
        gcc \\
        curl \\
        && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip \\
    && pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create non-root user
RUN useradd --create-home --shell /bin/bash app \\
    && chown -R app:app /app
USER app

# Expose port
EXPOSE {kwargs.get('port', 8000)}

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \\
    CMD curl -f http://localhost:{kwargs.get('port', 8000)}/health || exit 1

# Run application
CMD ["python", "main.py"]
'''

    def _requirements_template(self, **kwargs) -> str:
        """Requirements.txt template"""
        return '''# Python Requirements - Generated by CodeBuddy
# Core dependencies
requests>=2.28.0
python-dotenv>=0.19.0

# Web framework (uncomment if needed)
# flask>=2.2.0
# fastapi>=0.85.0
# uvicorn>=0.18.0

# Database (uncomment if needed)
# sqlalchemy>=1.4.0
# psycopg2-binary>=2.9.0
# pymongo>=4.2.0

# Data processing (uncomment if needed)
# pandas>=1.5.0
# numpy>=1.23.0
# matplotlib>=3.6.0
# seaborn>=0.11.0

# Testing
pytest>=7.1.0
pytest-cov>=4.0.0

# Code quality
black>=22.8.0
flake8>=5.0.0
mypy>=0.982

# Development
ipython>=8.5.0
jupyter>=1.0.0
'''

    def _gitignore_template(self, **kwargs) -> str:
        """Gitignore template"""
        return '''# Gitignore - Generated by CodeBuddy

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Project specific
*.db
*.sqlite
logs/
temp/
tmp/
'''

    def _readme_template(self, project_name: str = "My Project", **kwargs) -> str:
        """README.md template"""
        return f'''# {project_name}

{kwargs.get('description', 'A project generated by CodeBuddy')}

## 🚀 Features

- Feature 1
- Feature 2
- Feature 3

## 📋 Requirements

- Python 3.8+
- Dependencies listed in `requirements.txt`

## 🛠️ Installation

1. Clone the repository:
   ```bash
   git clone <repository-url>
   cd {project_name.lower().replace(' ', '-')}
   ```

2. Create virtual environment:
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\\Scripts\\activate
   ```

3. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

## 🎯 Usage

```bash
python main.py
```

### Examples

```python
# Example usage
from {project_name.lower().replace(' ', '_')} import MyClass

obj = MyClass()
result = obj.process("data")
print(result)
```

## 🧪 Testing

Run tests with:
```bash
pytest
```

Run with coverage:
```bash
pytest --cov={project_name.lower().replace(' ', '_')}
```

## 📁 Project Structure

```
{project_name.lower().replace(' ', '-')}/
├── main.py              # Entry point
├── {project_name.lower().replace(' ', '_')}/         # Main package
│   ├── __init__.py
│   └── core.py
├── tests/               # Test files
│   ├── __init__.py
│   └── test_core.py
├── requirements.txt     # Dependencies
├── README.md           # This file
└── .gitignore          # Git ignore rules
```

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 🙏 Acknowledgments

- Generated by CodeBuddy
- Thanks to all contributors

---

**Built with ❤️ using CodeBuddy**
'''

    def _setup_py_template(self, project_name: str = "my-project", **kwargs) -> str:
        """Setup.py template"""
        package_name = project_name.lower().replace('-', '_')
        return f'''#!/usr/bin/env python3
"""
Setup script for {project_name}
Generated by CodeBuddy
"""

from setuptools import setup, find_packages
import os

# Read README for long description
def read_readme():
    with open("README.md", "r", encoding="utf-8") as fh:
        return fh.read()

# Read requirements
def read_requirements():
    with open("requirements.txt", "r", encoding="utf-8") as fh:
        return [line.strip() for line in fh if line.strip() and not line.startswith("#")]

setup(
    name="{project_name}",
    version="{kwargs.get('version', '1.0.0')}",
    author="{kwargs.get('author', 'CodeBuddy')}",
    author_email="{kwargs.get('email', 'user@example.com')}",
    description="{kwargs.get('description', 'A project generated by CodeBuddy')}",
    long_description=read_readme(),
    long_description_content_type="text/markdown",
    url="{kwargs.get('url', 'https://github.com/user/repo')}",
    packages=find_packages(),
    classifiers=[
        "Development Status :: 4 - Beta",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
    ],
    python_requires=">=3.8",
    install_requires=read_requirements(),
    extras_require={{
        "dev": [
            "pytest>=7.1.0",
            "pytest-cov>=4.0.0",
            "black>=22.8.0",
            "flake8>=5.0.0",
            "mypy>=0.982",
        ],
    }},
    entry_points={{
        "console_scripts": [
            "{package_name}={package_name}.main:main",
        ],
    }},
    include_package_data=True,
    zip_safe=False,
)
'''

    def _makefile_template(self, **kwargs) -> str:
        """Makefile template"""
        return '''# Makefile - Generated by CodeBuddy
.PHONY: help install test lint format clean build deploy

# Default target
help:
	@echo "Available targets:"
	@echo "  install    - Install dependencies"
	@echo "  test       - Run tests"
	@echo "  lint       - Run linting"
	@echo "  format     - Format code"
	@echo "  clean      - Clean build artifacts"
	@echo "  build      - Build package"
	@echo "  deploy     - Deploy application"

# Install dependencies
install:
	pip install --upgrade pip
	pip install -r requirements.txt

# Install development dependencies
install-dev:
	pip install --upgrade pip
	pip install -r requirements.txt
	pip install pytest pytest-cov black flake8 mypy

# Run tests
test:
	pytest tests/ -v

# Run tests with coverage
test-cov:
	pytest tests/ -v --cov=. --cov-report=html --cov-report=term

# Run linting
lint:
	flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
	flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
	mypy . --ignore-missing-imports

# Format code
format:
	black . --line-length=100
	isort . --profile black

# Clean build artifacts
clean:
	rm -rf build/
	rm -rf dist/
	rm -rf *.egg-info/
	rm -rf __pycache__/
	rm -rf .pytest_cache/
	rm -rf .coverage
	rm -rf htmlcov/
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete

# Build package
build: clean
	python setup.py sdist bdist_wheel

# Deploy (customize as needed)
deploy:
	@echo "Deploying application..."
	# Add deployment commands here

# Run application
run:
	python main.py

# Development server (if applicable)
dev:
	python main.py --debug

# Docker commands
docker-build:
	docker build -t myapp .

docker-run:
	docker run -p 8000:8000 myapp

# Database commands (if applicable)
db-migrate:
	@echo "Running database migrations..."
	# Add migration commands here

db-seed:
	@echo "Seeding database..."
	# Add seeding commands here
'''
